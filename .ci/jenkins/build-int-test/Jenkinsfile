#!/usr/bin/env groovy

pipeline {
    agent any
    parameters {
        string(name: 'ART_DOCKER_REGISTRY', defaultValue: 'artifactory-fn.jpl.nasa.gov:16001',
               description: 'Address of Artifactory-FN Docker registry for uploading Docker images.')
        credentials (name: 'ART_CREDENTIALS',
                     defaultValue: 'artifactory-operapgebot',
                     credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
                     description: 'Artifactory-FN credentials for account operapgebot. Used to push/pull images from Artifactory during build.',
                     required: true)
    }
    environment {
        DOCKER_IMAGE_PREFIX = 'opera_pge'
        // TODO: update as newer PGE's are added
        DOCKER_IMAGE_SUFFIXES = 'dswx_hls'
        DOCKER_TAG = """${sh(
                     returnStdout: true,
                     script: 'echo ${GIT_BRANCH##*/}'
                     ).trim()}"""
    }
    stages {
        stage('Build OPERA PGE Docker image(s)') {
            steps {
                script {
                    docker.withRegistry ('https://' + params.ART_DOCKER_REGISTRY, params.ART_CREDENTIALS) {
                        echo "Building ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                        sh label: 'Build all OPERA Docker images',
                           script: ".ci/scripts/build_all_images.sh $DOCKER_TAG"
                    }
                }
            }
        }
        stage('Test OPERA PGE Docker image(s)') {
            steps {
                echo "Testing ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                sh label: 'Test all OPERA Docker images',
                   script: ".ci/scripts/test_int_dswx_hls.sh --tag $DOCKER_TAG --testdata delivery_2.1_mid_may.zip --runconfig opera_pge_dswx_hls_delivery_2.1_mid_may_runconfig.yaml"
                archiveArtifacts artifacts: 'test_results/**/*.html', fingerprint: true
                publishHTML([allowMissing: true,
                             alwaysLinkToLastBuild: true,
                             keepAll: true,
                             reportDir: "test_results",
                             reportFiles: "dswx_hls/test_int_dswx_results.html,
                             reportName: "Integration Test Results",
                             reportTitles: "Test Results"])
            }
        }
    }
    post {
        always {
            echo "Cleaning up Docker images from local host"
            sh ".ci/scripts/cleanup.sh ${DOCKER_TAG}"
            deleteDir()
        }
        success {
            echo 'Succeeded!'
        }
        unstable {
            echo 'Unstable :/'
        }
        failure {
            echo 'Failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
