#!/usr/bin/env groovy

pipeline {
    agent any
    environment {
        DOCKER_IMAGE_PREFIX = 'opera_pge'
        DOCKER_TAG = """${sh(
                     returnStdout: true,
                     script: 'echo ${GIT_BRANCH##*/}'
                     ).trim()}"""
    }
    parameters {
        // TODO: update default value as newer PGE's are added
        string(name: 'DOCKER_IMAGE_SUFFIXES', defaultValue: 'dswx_hls,cslc_s1,rtc_s1',
               description: 'Comma-delimited list of PGE names to run integration tests for')
        string(name: 'ART_DOCKER_REGISTRY', defaultValue: 'artifactory-fn.jpl.nasa.gov:16001',
               description: 'Address of Artifactory-FN Docker registry for uploading Docker images.')
        credentials (name: 'ART_CREDENTIALS',
                     defaultValue: 'artifactory-operapgebot',
                     credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
                     description: 'Artifactory-FN credentials for account operapgebot. Used to push/pull images from Artifactory during build.',
                     required: true)
    }
    stages {
        stage('Build OPERA PGE Docker image(s)') {
            steps {
                script {
                    docker.withRegistry ('https://' + params.ART_DOCKER_REGISTRY, params.ART_CREDENTIALS) {
                        DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                            echo "Building ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} docker image with tag ${DOCKER_TAG}"
                            sh label: "Build ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} OPERA Docker image",
                               script: ".ci/scripts/build_${DOCKER_IMAGE_SUFFIX}.sh --tag $DOCKER_TAG"
                        }
                    }
                }
            }
        }
        stage('Integration Test OPERA PGE Docker image(s)') {
            steps {
                script {
                    def htmlFiles = []
                    def reportTitles = []

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        echo "Integration testing Docker image ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"

                        def statusCode = sh label: "Running Integration Test for image ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}", returnStatus:true,
                           script: ".ci/scripts/test_int_${DOCKER_IMAGE_SUFFIX}.sh --tag ${DOCKER_TAG}"

                        echo "Test returned code ${statusCode}"

                        if (statusCode == 2) {
                            unstable "Product comparison failure detected. Setting stage result to unstable."
                        }
                        else if (statusCode != 0) {
                            currentBuild.result = 'FAILURE'
                        }
                        else if (statusCode == 0) {
                            currentBuild.result = 'SUCCESS'
                        }

                        htmlFiles << "${DOCKER_IMAGE_SUFFIX}/test_int_${DOCKER_IMAGE_SUFFIX}_results.html"
                        reportTitles << "${DOCKER_IMAGE_SUFFIX}"
                    }

                    publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: "test_results",
                        reportFiles: htmlFiles.join(','),
                        reportName: "Integration Test Results",
                        reportTitles: reportTitles.join(',')
                    ]
                }
                archiveArtifacts artifacts: 'test_results/**/test_int_*_results.html'
            }
        }
    }
    post {
        always {
            echo "Cleaning up Docker images from local host"
            sh ".ci/scripts/cleanup.sh ${DOCKER_TAG}"
            deleteDir()
        }
        success {
            echo 'Succeeded!'
        }
        unstable {
            echo 'Unstable :/'
        }
        failure {
            echo 'Failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
