#!/usr/bin/env groovy

// Copyright 2021, by the California Institute of Technology.
// ALL RIGHTS RESERVED.
// United States Government sponsorship acknowledged.
// Any commercial use must be negotiated with the Office of Technology Transfer
// at the California Institute of Technology.
// This software may be subject to U.S. export control laws and regulations.
// By accepting this document, the user agrees to comply with all applicable
// U.S. export laws and regulations. User has the responsibility to obtain
// export licenses, or other export authority as may be required, before
// exporting such information to foreign countries or providing access to
// foreign persons.

pipeline {
    agent any
    parameters {
        string(name: 'ART_URL', defaultValue: 'https://artifactory-fn.jpl.nasa.gov/artifactory',
               description: 'Artifactory-FN URL.')
        string(name: 'ART_TAR_PATH', defaultValue: 'general/gov/nasa/jpl/opera/sds/pge/',
               description: 'Artifactory path to publish PGE docker image tar files to.')
        string(name: 'ART_DOCS_PATH', defaultValue: 'general/gov/nasa/jpl/opera/sds/pge/documentation',
               description: 'Artifactory path to publish PGE documentation files to.')
        string(name: 'ART_DOCKER_PATH', defaultValue: '/gov/nasa/jpl/opera/sds/pge/',
               description: 'Artifactory path to push Docker images.')
        string(name: 'ART_DOCKER_REGISTRY', defaultValue: 'artifactory-fn.jpl.nasa.gov:16001',
               description: 'Address of Artifactory-FN Docker registry for uploading Docker images.')
        credentials (name: 'ART_CREDENTIALS',
                     // TODO: replace once OPERA-specific creds are available
                     defaultValue: 'collinss-artifactory-fn-credentials',
                     credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
                     description: 'Artifactory-FN credentials for account collinss. Used to push/pull images from Artifactory during build.',
                     required: true)
        credentials(name: 'GITHUB_OAUTH_TOKEN',
                    defaultValue: '8443f80e-014a-4dea-b122-5ca34d8aaab1',
                    credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl',
                    description: 'GitHub OAUTH Token for user collinss-jpl on github.com',
                    required: true)
    }
    environment {
        DOCKER_IMAGE_PREFIX = 'opera_pge'
        // TODO: update as newer PGE's are added
        DOCKER_IMAGE_SUFFIXES = 'dswx_hls'
        DOCKER_TAG = """${sh(
                     returnStdout: true,
                     script: 'echo ${GIT_BRANCH##*/}'
                     ).trim()}"""
    }
    stages {
        stage('Build OPERA PGE Docker image(s)') {
            steps {
                script {
                    docker.withRegistry ('https://' + params.ART_DOCKER_REGISTRY, params.ART_CREDENTIALS) {
                        echo "Building ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                        sh label: 'Build all OPERA Docker images',
                           script: ".ci/scripts/build_all_images.sh $DOCKER_TAG"
                    }
                }
            }
        }
        stage('Test OPERA PGE Docker image(s)') {
            steps {
                echo "Testing ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                sh label: 'Test all OPERA Docker images',
                   script: ".ci/scripts/test_all_images.sh $DOCKER_TAG"
                junit 'test_results/**/*.xml'
                archiveArtifacts artifacts: 'test_results/**/*.log', fingerprint: true
                // TODO: this will require rework once we have more than one PGE to deal with
                publishHTML([allowMissing: true,
                             alwaysLinkToLastBuild: true,
                             keepAll: true,
                             reportDir: 'test_results/dswx_hls/coverage_html',
                             reportFiles: 'index.html',
                             reportName: 'Code Coverage',
                             reportTitles: 'DSWx-HLS Code Coverage'])
            }
        }
        stage('Generate OPERA PGE Sphinx Documentation') {
            steps {
                script {
                    echo "Installing Sphinx Dependencies"
                    sh label: 'Installing conda environment for Sphinx',
                       script: '''#!/bin/bash
                         /usr/local/anaconda3/bin/conda create -n sphinx_env python=3.8 pip
                         /usr/local/anaconda3/bin/conda init bash
                    '''

                    sh label: 'Installing Sphinx to conda environment',
                       script: '''#!/bin/bash
                       . /var/lib/jenkins/.bashrc
                       conda activate sphinx_env
                       pip install -r ./requirements.txt
                       pip install -r ./requirements_dev.txt
                       '''

                    sh label: 'Invoking clean target for Sphinx build',
                       script: '''#!/bin/bash
                       . /var/lib/jenkins/.bashrc
                       conda activate sphinx_env
                       /usr/bin/make --directory=./docs clean
                       '''

                    sh label: 'Invoking html target for Sphinx build',
                       script: '''#!/bin/bash
                       . /var/lib/jenkins/.bashrc
                       conda activate sphinx_env
                       /usr/bin/make --directory=./docs html
                       '''

                    // TODO: revisit once latexpdf is working on CI system
                    //sh label: 'Invoking latexpdf target for Sphinx build',
                    //   script: '''#!/bin/bash
                    //   . /var/lib/jenkins/.bashrc
                    //   conda activate sphinx_env
                    //   /usr/bin/make --directory=./docs latexpdf
                    //   '''
                }
            }
        }
        stage('Push OPERA PGE HTML documentation to GitHub Pages') {
            steps {
                git branch: 'gh-pages',
                    changelog: false,
                    poll: false,
                    url: 'https://github.com/nasa/opera-sds-pge'

                withCredentials([string(credentialsId: params.GITHUB_OAUTH_TOKEN, variable: 'TOKEN')]) {
                    sh label: 'Updating gh-pages branch with latest HTML docs',
                       script: '''#!/bin/bash
                       cp -rf ./docs/_build/html/* .
                       git add .
                       git add -u
                       git commit -m "HTML docs update by Jenkins"
                       git remote set-url origin https://${TOKEN}@github.com/nasa/opera-sds-pge.git
                       git push --set-upstream origin gh-pages
                       '''
                }
            }
        }
        // TODO: revisit once latexpdf is working on CI system
//         stage('Upload OPERA PGE PDF Documentation to Artifactory FN') {
//             steps {
//                 script {
//                     rtServer (
//                         id: 'ARTIFACTORY_FN_SERVER',
//                         url: params.ART_URL,
//                         credentialsId: params.ART_CREDENTIALS,
//                         timeout: 300
//                     )
//
//                     sh "mv ./docs/opera-pge-manual.pdf opera-pge-manual-${DOCKER_TAG}.pdf"
//
//                     echo "Uploading PDF documentation to Artifactory-FN"
//
//                     rtUpload(
//                         serverId: "ARTIFACTORY_FN_SERVER",
//                         spec:
//                           """{
//                               "files": [
//                                   {
//                                       "pattern": "opera-pge-manual-${DOCKER_TAG}.pdf",
//                                       "target": "${params.ART_DOCS_PATH}"
//                                   }
//                               ]
//                           }"""
//                     )
//
//                     sh "rm -f opera-pge-manual-${DOCKER_TAG}.pdf"
//                 }
//             }
//         }
        stage('Upload OPERA PGE Docker image tar files to Artifactory-FN') {
            steps {
                script {
                    rtServer (
                        id: 'ARTIFACTORY_FN_SERVER',
                        url: params.ART_URL,
                        credentialsId: params.ART_CREDENTIALS,
                        timeout: 300
                    )

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"
                        TAR_FILE_NAME = "${DOCKER_IMAGE_PREFIX}-${DOCKER_IMAGE_SUFFIX}-${DOCKER_TAG}.tar"
                        echo "Saving Docker image ${DOCKER_IMAGE} to tar file ${TAR_FILE_NAME}"
                        sh "docker save -o ${TAR_FILE_NAME} ${DOCKER_IMAGE}"
                        sh "gzip -f ${TAR_FILE_NAME}"
                        TAR_GZ_FILE_NAME = "${TAR_FILE_NAME}.gz"

                        echo "Uploading Docker image tar file to Artifactory-FN"

                        rtUpload(
                            serverId: "ARTIFACTORY_FN_SERVER",
                            spec:
                              """{
                                  "files": [
                                      {
                                          "pattern": "${TAR_GZ_FILE_NAME}",
                                          "target": "${params.ART_TAR_PATH}"
                                      }
                                  ]
                              }"""
                        )

                        sh "rm -f ${TAR_FILE_NAME} ${TAR_GZ_FILE_NAME}"
                    }
                }
            }
        }
        stage('Upload Docker images to Artifactory FN Docker Registry') {
            steps {
                script {
                    rtServer (
                        id: 'ARTIFACTORY_FN_DOCKER_REGISTRY',
                        url: params.ART_DOCKER_REGISTRY,
                        credentialsId: params.ART_CREDENTIALS,
                        timeout: 300
                    )

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"
                        sh "docker tag ${DOCKER_IMAGE} ${ART_DOCKER_REGISTRY}${ART_DOCKER_PATH}${DOCKER_IMAGE}"
                        echo "Publishing Docker Image ${DOCKER_IMAGE} to Artifactory FN Docker Registry"
                        rtDockerPush(
                            serverId: "ARTIFACTORY_FN_DOCKER_REGISTRY",
                            image: "${ART_DOCKER_REGISTRY}${ART_DOCKER_PATH}${DOCKER_IMAGE}",
                            targetRepo: "docker-develop-local"
                        )
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning up Docker images from local host"
            sh ".ci/scripts/cleanup.sh ${DOCKER_TAG}"
            echo "Removing Sphinx build environment"
            sh "/usr/local/anaconda3/bin/conda env remove --name sphinx_env"
            sh "/usr/local/anaconda3/bin/conda init --reverse"
            deleteDir()
        }
        success {
            echo 'Succeeded!'
        }
        unstable {
            echo 'Unstable :/'
        }
        failure {
            echo 'Failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
