ps_options:
    # Amplitude dispersion threshold to consider a pixel a PS.
    amp_dispersion_threshold: num()
phase_linking:
    # Size of the ministack for sequential estimator.
    ministack_size: int(min=2)
    # Maximum number of compressed images to use in sequential estimator.
    # If there are more ministacks than this, the earliest CCSLCs will be left
    # out of the later stacks.
    max_num_compressed: int(min=1)
    half_window:
        # Half window size (in pixels) for x direction.
        x: int()
        # Half window size (in pixels) for y direction.
        y: int()
    # Use EVD on the coherence instead of using the EMI algorithm.
    use_evd: bool()
    # Beta regularization parameter for correlation matrix inversion. 0 is no regularization.
    beta: num(min=0.0, max=1.0)
    # Method for finding SHPs during phase linking.
    shp_method: enum('glrt', 'ks', 'kld', 'rect')
    # Significance level (probability of false alarm) for SHP tests.
    shp_alpha: num(min=0.0, max=1.0)
interferogram_network:
    # For single-reference network: Index of the reference image in the network.
    reference_idx: any(int(), null())
    # Max n to form the nearest-n interferograms by index.
    max_bandwidth: any(int(), null())
    # Maximum temporal baseline of interferograms.
    max_temporal_baseline: any(int(), null())
    # For manual-index network: List of (ref_idx, sec_idx) defining the interferograms to form.
    indexes: any(list(list()), null())
unwrap_options:
    # Whether to run the unwrapping step after wrapped phase estimation.
    run_unwrap: bool()
    # Phase unwrapping method.
    unwrap_method: enum('snaphu', 'icu', 'phass')
    # Number of interferograms to unwrap in parallel.
    n_parallel_jobs: int()
    # (snaphu-py or multiscale unwrapping) Number of tiles to split the inputs into
    ntiles: list()
    # (for multiscale unwrapping) Extra multilook factor to use for the coarse unwrap.
    downsample_factor: any(list(int(), min=2, max=2), null())
    # (for use in snaphu-py) Amount of tile overlap (in pixels) along the (row, col) directions.
    tile_overlap: list(int(), min=2, max=2)
    # (for snaphu) Number of tiles to unwrap in parallel for each interferogram.
    n_parallel_tiles: int()
    # Initialization method for SNAPHU.
    init_method: enum('mcf', 'mst')
    # Statistical cost mode method for SNAPHU.
    cost: enum('defo', 'smooth')
output_options:
    # Output (x, y) resolution (in units of input data).
    output_resolution: any(include('x_y_object'), null())
    # Alternative to specifying output resolution: Specify the (x, y) strides (decimation
    # factor) to perform while processing input. For example, strides of [4, 2] would turn an
    # input resolution of [5, 10] into an output resolution of [20, 20].
    strides: any(include('x_y_object'), null())
    # Area of interest: (left, bottom, right, top) longitude/latitude e.g.
    # `bbox=(-150.2,65.0,-150.1,65.5)`.
    bounds: any(list(num(), min=4, max=4), null())
    # EPSG code for the `bounds`, if specified.
    bounds_epsg: int()
    # Options for `create_dataset` with h5py.
    hdf5_creation_options:
        chunks: list(int())
        compression: str()
        compression_opts: int()
        shuffle: bool()
    # GDAL creation options for GeoTIFF files.
    gtiff_creation_options: list(str())
    # Whether to add overviews to the output GeoTIFF files.
    # This will increase file size, but can be useful for visualizing the data
    # with web mapping tools. See https://gdal.org/programs/gdaladdo.html for more.
    add_overviews: bool()
    # List of overview levels to create (if add_overviews=True).
    overview_levels: list(int())
# Name of the subdataset to use in the input NetCDF files.
subdataset: str()
---
x_y_object:
    x: int()
    y: int()
