ps_options:
    # Amplitude dispersion threshold to consider a pixel a PS.
    amp_dispersion_threshold: num()
phase_linking:
    # Size of the ministack for sequential estimator.
    ministack_size: int()
    half_window:
        # Half window size (in pixels) for x direction.
        x: int()
        # Half window size (in pixels) for y direction.
        y: int()
    # Use EVD on the coherence instead of using the EMI algorithm.
    use_evd: bool()
    # Beta regularization parameter for correlation matrix inversion. 0 is no regularization.
    beta: num()
    # Method for finding SHPs during phase linking.
    shp_method: enum('glrt', 'ks', 'kld', 'rect', 'rect')
    # Significance level (probability of false alarm) for SHP tests.
    shp_alpha: num()
interferogram_network:
    # For single-reference network: Index of the reference image in the network.
    reference_idx: any(int(), null())
    # Max `n` to form the nearest-`n` interferograms by index.
    max_bandwidth: any(int(), null())
    # Maximum temporal baseline of interferograms.
    max_temporal_baseline: any(int(), null())
    # For manual-index network: List of (ref_idx, sec_idx) defining the interferograms to form.
    indexes: any(list(list()), null())
    # Type of interferogram network to create from phase-linking results.
    network_type: enum('single-reference', 'manual-index', 'max-bandwidth', 'max-temporal-baseline')
unwrap_options:
    # Whether to run the unwrapping step after wrapped phase estimation.
    run_unwrap: bool()
    # Phase unwrapping method.
    unwrap_method: enum('snaphu', 'icu', 'phass')
    # Number of tiles to split the unwrapping into (for multi-scale unwrapping).
    ntiles: list()
    # (for multiscale unwrapping) Extra multilook factor to use for the coarse unwrap.
    downsample_factor: list()
    # Number of interferograms to unwrap in parallel.
    n_parallel_jobs: int()
    # Initialization method for SNAPHU.
    init_method: str()
output_options:
    # Output (x, y) resolution (in units of input data).
    output_resolution: any(include('x_y_object'), null())
    # Alternative to specifying output resolution: Specify the (x, y) strides (decimation
    # factor) to perform while processing input. For example, strides of [4, 2] would turn an
    # input resolution of [5, 10] into an output resolution of [20, 20].
    strides: any(include('x_y_object'), null())
    # Area of interest: (left, bottom, right, top) longitude/latitude e.g.
    # `bbox=(-150.2,65.0,-150.1,65.5)`.
    bounds: any(list(num()), null())
    # EPSG code for the `bounds`, if specified.
    bounds_epsg: int()
    # Options for `create_dataset` with h5py.
    hdf5_creation_options:
        chunks: list()
        compression: str()
        compression_opts: int()
        shuffle: bool()
    # GDAL creation options for GeoTIFF files.
    gtiff_creation_options: list()
# Name of the subdataset to use in the input NetCDF files.
subdataset: str()
---
x_y_object:
    x: int()
    y: int()
